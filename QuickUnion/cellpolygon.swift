//
//  cellpolygon.swift
//  QuickUnion
//
//  Created by quaerix on 08.01.17.
//  Copyright ¬© 2017 quaerix. All rights reserved.
//

import Foundation

/// –ü–æ–ª–∏–≥–æ–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–æ—Ä–∏–∏ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
class CellPolygon {
   
   let threshold : Double
   var cells     : [Double]
   var field     : UnionSquare
   
   init(dimension : Int, threshold : Double) {
      
      self.threshold = threshold
      field = UnionSquare(width: dimension, height: dimension)
      cells = [Double]()
      
      for _ in 0..<dimension * dimension {
         cells.append(Double(arc4random())/Double(UInt32.max))
      }
      
      // —Å—Ç—Ä–æ–µ–º —Å–≤—è–∑–∏
      calc()
   }
   
   func isOpen(_ item : (Int,Int)) -> Bool {
      return (cells[field.width * item.1 + item.0] < threshold)
   }
   
   /// –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—è
   private func calc() {
      for y in 0..<field.height {
         for x in 0..<field.width where isOpen((x,y)) {
            // —Å–≤—è–∑—å —Å –ø—Ä–∞–≤–æ–π —è—á–µ–π–∫–æ–π
            if x<field.width-1 && isOpen((x+1,y)) {
               _ = field.union((x,y), (x+1,y))
            }
            // —Å–≤—è–∑—å —Å –Ω–∏–∂–Ω–µ–π —è—á–µ–π–∫–æ–π
            if y<field.height-1 && isOpen((x,y+1)) {
               _ = field.union((x,y), (x,y+1))
            }
         }
         
         // –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
         var _ = Double(y)/Double(field.height)
      }
   }
   
   /// –Ω–∞–ª–∏—á–∏–µ —Å–∫–≤–æ–∑–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ –ø–æ–ª–µ
   /// - Returns : –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
   func crossPoints() -> [(Set<Int>, Set<Int>)] {
      
      var ways = [(Set<Int>, Set<Int>)]()
      
      // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≥—Ä—É–ø–ø—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ª–æ—è, —Å –∫–æ—Ç–æ—Ä–æ–π —Å–≤—è–∑–∞–Ω–∞ —Ç–æ—á–∫–∞
      func connected(point:Int) -> Int? {
         for i in 0..<ways.count {
            for indx in ways[i].0 {
               if field.connected((indx,0), (point,0)) {
                  return i
               }
            }
         }
         return nil
      }
      
      // –Ω–∞—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑–Ω—ã–µ –ø—É—Ç–∏ –≤–∏–¥–∞ (0,1) -> <(h-1,5),(h-1,6)>
      for i in 0..<field.width where isOpen((i,0)) {
         
         // —Ç–æ—á–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ª–æ—è, 
         // –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞–π–¥–µ–Ω—ã –ø—É—Ç–∏
         if let indx = connected(point: i) {
            ways[indx].0.insert(i)
            continue
         }
         // –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è
         var way = (Set<Int>([i]), Set<Int>())
         // –∏—â–µ–º —Å–≤—è–∑–∏ —Å –∫–æ–Ω–µ—á–Ω—ã–º —Å–ª–æ–µ–º
         for j in 0..<field.width where isOpen((j,field.height-1)) {
            if field.connected((i,0), (j,field.height-1)) {
               way.1.insert(j)
            }
         }
         if !way.1.isEmpty {
            ways.append(way)
         }
      }
      return ways
   }

   /// –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–æ—á–∫–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –∏ –¥–æ –∫–æ–Ω—Ü–∞
   func crossAllPoints() -> [Set<Int>] {
      var res = [Set<Int>]()
      
      // –ø–æ–ª—É—á–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
      let cross = crossPoints()
      guard !cross.isEmpty else {
         return res
      }
      
      // –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ—á–µ–∫
      // –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∏ –∫–æ–Ω–µ—á–Ω—ã–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
      for path in cross {
         var way = Set<Int>()
         let last_line = field.height-1
         
         // –¥–æ–±–∞–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏
         for x in path.0 {
            way.insert(field.index((x,0)))
         }
         for x in path.1 {
            way.insert(field.index((x,last_line)))
         }
         
         let begin = (path.0.first!,0), end = (path.1.first!,last_line)
         // —Ç—É–ø–æ–π –ø–µ—Ä–µ–±–æ—Ä —Ç–æ—á–µ–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª–æ—è—Ö
         for y in 1..<last_line {
            for x in 0..<field.width where isOpen((x,y)) {
               let pt = (x,y)
               if field.connected(pt, begin) && field.connected(pt, end) {
                  way.insert(field.index(pt))
               }
            }
         }
         // –¥–æ–±–∞–≤–∏–º –ø—É—Ç—å
         res.append(way)
      }
      return res
   }

   /// —Ä–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
   var realThreshold : Double {
      var countOpen = 0
      
      for y in 0..<field.height {
         for x in 0..<field.width {
            if isOpen((x,y)) {
               countOpen += 1
            }
         }
      }
      return Double(countOpen)/Double(field.height*field.width)
   }
   
   /// —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –ø–æ–ª—è
   func printCells(special : [Set<Int>]) {
      let symClosed = "‚ö´Ô∏è", symOpen = "‚ö™Ô∏è"
      let symSpec = ["üî¥","üîµ","üíö","üíõ"]
      
      for y in 0..<field.height {
         var line = ""
         for x in 0..<field.width {
            if isOpen((x,y)) {
               let spec = special.index(where: { $0.contains(field.index((x,y))) })
               line    += (spec != nil) ? symSpec[spec! % symSpec.count] : symOpen
            }
            else {
               line += symClosed
            }
         }
         print(line)
      }
   }
}

/// –§–∞–±—Ä–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ
func calcProbabilitiesForCellField(dimension : Int, iterations : Int, probability : CountableClosedRange<Int>) {
   
   var statistics = [Int:(Int,Int)]()
   let stat_queue = DispatchQueue(label: "statistics.quaeue")
   
   print("calc avg. probability of cross connection for open state threshold's range \(probability)% with \(iterations) iterations for each, on cells field [\(dimension)x\(dimension)]")
   
   for p in probability {
      // –ø–∞—Ä–∞–ª–ª–µ–ª–∏–º
      DispatchQueue.concurrentPerform(iterations: iterations) { iter in
         let polygon   = CellPolygon(dimension: dimension, threshold: Double(p)/100)
         let cross     = polygon.crossPoints().isEmpty == false
         let threshold = Int(polygon.realThreshold * 100)
         
         // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
         stat_queue.async {
            statistics[threshold]     = statistics[threshold] ?? (0,0)
            statistics[threshold]!.0 += cross ? 1 : 0
            statistics[threshold]!.1 += 1
            
            if iter == iterations-1 {
               print("done: \(Double(p-probability.lowerBound)/Double(probability.count)*100)%")
            }
         }
      }
   }
   
   // —Å–æ—Ä—Ç–∏—Ä—É–µ–º
   let sorted = statistics.sorted { $0.0 < $1.0 }
   for (key,val) in sorted {
      print("\(key)%\t\(Double(val.0)/Double(val.1)*100)% (\(val.1))")
   }
}

/// –∏—â–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∫–≤–æ–∑–Ω—ã—Ö –ø—É—Ç–∏
func cellPolygonFindWays(dimension : Int, threshold : Double, ways_count : Int, max_iterations : Int = Int.max) -> Bool {
   var iterations = 0
   
   while (iterations < max_iterations) {
      let poly = CellPolygon(dimension: dimension, threshold: threshold)
      let ways = poly.crossPoints()
      
      iterations += 1
      if iterations % 10_000 == 0 {
         print("\(iterations) iterations done")
      }
      
      if ways.count != ways_count {
         continue
      }
      
      let fullways = poly.crossAllPoints()
      if fullways.count != ways_count {
         print("inconsistence")
         continue
      }
      
      poly.printCells(special: fullways)
      
      print("\(ways_count) ways finded after \(iterations) iterations on probability \(poly.realThreshold * 100)%")
      return true
   }
   return false
}

/// –§–∞–±—Ä–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ
func findProbabilitiesForCellFieldCrossWays(dimension : Int, ways_count : Int, max_iterations : Int, probability : CountableClosedRange<Int>) {
   
   // –ø–∞—Ä–∞–ª–ª–µ–ª–∏–º
   DispatchQueue.concurrentPerform(iterations: probability.count) { i in
      let p = probability.lowerBound + i
      
      print("finding \(ways_count) ways for probability \(p)%")
      _ = cellPolygonFindWays(dimension: dimension, threshold: Double(p)/100, ways_count: ways_count, max_iterations: max_iterations)
   }
}
